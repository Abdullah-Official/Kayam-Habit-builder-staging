# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

DATABASE_URL="mysql://admin:kayam123kayam123@kayam-habit-builder-staging.colgsq2adoyw.us-east-1.rds.amazonaws.com:3306/prisma"
PORT=4000

async function startChallenge(req, res) {
  const { userId, challengeId, score } = req.body;
  const userCurrentChallenge = await prisma.userChallenge.findFirst({
    where: { userId, isInProgress: true },
  });
  const startDateTime = new Date().toISOString();
  const endDateTime = moment(startDateTime).add(7, "days").toISOString();
  try {
    if (userCurrentChallenge?.id) {
      const updateUserChallenge = await prisma.userChallenge.update({
        data: {
          isInProgress: false,
          score,
        },
        where: {
          id: userCurrentChallenge?.id,
        },
      });
      if (updateUserChallenge) {
        const challenge = await prisma.challenges.findUnique({
          where: {
            id: challengeId,
          },
        });
        if (challenge?.id) {
          const notification = await prisma.notifications.create({
            data: {
              userId,
              time: new Date().toLocaleTimeString(),
              activeTillDateTime: endDateTime,
            },
          });
          if (notification?.id) {
            const userChallenge = await prisma.userChallenge.create({
              data: {
                notificationId: notification?.id,
                userId,
                challengeId,
                isPending: true,
                startDateTime,
                endDateTime,
              },
            });
            if (userChallenge?.id) {
              res
                .status(200)
                .json({ success: true, userChallenge, notification });
            } else {
              response.sendBadRequest(res, "Can't create User Challenge");
            }
          }
        } else {
          response.sendBadRequest(res, "No Challenge Found!");
        }
      } else {
        response.sendBadRequest(res, "Can't Start New challenge");
      }
    } else {
      const challenge = await prisma.challenges.findUnique({
        where: {
          id: challengeId,
        },
      });
      if (challenge?.id) {
        const notification = await prisma.notifications.create({
          data: {
            userId,
            time: new Date().toLocaleTimeString(),
            activeTillDateTime: endDateTime,
          },
        });
        if (notification?.id) {
          const userChallenge = await prisma.userChallenge.create({
            data: {
              notificationId: notification?.id,
              userId,
              challengeId,
              isPending: true,
              startDateTime,
              endDateTime,
            },
          });
          if (userChallenge?.id) {
            res
              .status(200)
              .json({ success: true, userChallenge, notification });
          } else {
            response.sendBadRequest(res, "Can't create User Challenge");
          }
        }
      } else {
        response.sendBadRequest(res, "No Challenge Found!");
      }
    }
  } catch (error) {
    response.sendBadRequest(res, error?.message);
  }
}